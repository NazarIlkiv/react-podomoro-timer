{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nazar\\\\Desktop\\\\pomodoro-timer\\\\src\\\\Timer.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport PlayButton from './Button';\nimport PauseButton from './PauseButton';\nimport SettingsButton from './SettingsButton';\nimport { useContext, useState, useEffect, useRef } from 'react';\nimport SettingsContext from './SettingsContext';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst red = `#f54e4e`;\nconst green = `#4aec8c`;\n\nfunction Timer() {\n  _s();\n\n  const settingsInfo = useContext(SettingsContext);\n  const [isPaused, setIsPaused] = useState(true);\n  const [mode, setMode] = useState('work'); //work/null/break\n\n  const [secondsLeft, setSecondsLeft] = useState(0);\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  function switchMode() {\n    const nextMode = modeRef.current === 'work' ? 'break' : 'work';\n    const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60;\n    setMode(nextMode);\n    modeRef.current = nextMode;\n    setSecondsLeft(nextSeconds);\n    secondsLeftRef.current = nextSeconds;\n  }\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  function initTimer() {\n    setSecondsLeft(settingsInfo.workMinutes * 60);\n  }\n\n  useEffect(() => {\n    initTimer();\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n\n      if (secondsLeftRef.current === 0) {\n        return switchMode();\n      }\n\n      tick();\n    }, 1000);\n    return clearInterval(interval);\n  }, [settingsInfo]);\n  const totalSeconds = mode === 'work' ? settingsInfo.workMinutes * 60 : settingsInfo.breakMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds) * 100;\n  const minutes = secondsLeft / 60;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbar, {\n      value: percentage,\n      text: minutes,\n      styles: buildStyles({\n        textColor: '#fff',\n        pathColor: red,\n        trailColor: 'rgba(255, 255, 255, .2)'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: isPaused ? /*#__PURE__*/_jsxDEV(PlayButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(PauseButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: /*#__PURE__*/_jsxDEV(SettingsButton, {\n        onClick: () => settingsInfo.setShowSettings(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Timer, \"wLsOXioxHyC+0a8S06ETGdtL+3A=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["CircularProgressbar","buildStyles","PlayButton","PauseButton","SettingsButton","useContext","useState","useEffect","useRef","SettingsContext","App","red","green","Timer","settingsInfo","isPaused","setIsPaused","mode","setMode","secondsLeft","setSecondsLeft","secondsLeftRef","isPausedRef","modeRef","switchMode","nextMode","current","nextSeconds","workMinutes","breakMinutes","tick","initTimer","interval","setInterval","clearInterval","totalSeconds","percentage","Math","round","minutes","textColor","pathColor","trailColor","marginTop","setShowSettings"],"sources":["C:/Users/Nazar/Desktop/pomodoro-timer/src/Timer.js"],"sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport PlayButton from './Button';\r\nimport PauseButton from './PauseButton';\r\nimport SettingsButton from './SettingsButton';\r\nimport {useContext, useState, useEffect, useRef} from 'react';\r\nimport SettingsContext from './SettingsContext';\r\nimport App from './App';\r\n\r\n\r\nconst red = `#f54e4e`;\r\nconst green = `#4aec8c`;\r\n\r\nfunction Timer() {\r\n    const settingsInfo = useContext(SettingsContext);\r\n\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [mode, setMode] = useState('work'); //work/null/break\r\n    const [secondsLeft, setSecondsLeft] = useState(0);\r\n\r\n    const secondsLeftRef = useRef(secondsLeft);\r\n    const isPausedRef = useRef(isPaused);\r\n    const modeRef = useRef(mode);\r\n\r\n    function switchMode() {\r\n        const nextMode = modeRef.current === 'work' ? 'break' : 'work';\r\n        const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60 ; \r\n\r\n\r\n        setMode(nextMode);\r\nmodeRef.current = nextMode;\r\n\r\n\r\n\r\n        setSecondsLeft(nextSeconds);\r\n        secondsLeftRef.current = nextSeconds;\r\n    }\r\n\r\n    function tick() {\r\n        secondsLeftRef.current --;\r\n        setSecondsLeft(secondsLeftRef.current)\r\n    }\r\n\r\n    function initTimer() {\r\n        setSecondsLeft(settingsInfo.workMinutes * 60);\r\n    }\r\n\r\n    useEffect(() => {\r\n        initTimer();\r\n\r\n       const interval = setInterval(() => {\r\n            if (isPausedRef.current) {\r\nreturn;\r\n            }\r\n            if (secondsLeftRef.current === 0) {\r\nreturn switchMode();\r\n            }\r\n\r\n            tick();\r\n        }, 1000)\r\nreturn clearInterval(interval);\r\n    }, [settingsInfo]);\r\n\r\n\r\nconst totalSeconds = mode === 'work' \r\n? settingsInfo.workMinutes * 60 \r\n: settingsInfo.breakMinutes * 60;\r\nconst percentage = Math.round(secondsLeft / totalSeconds) * 100;\r\n\r\nconst minutes = secondsLeft / 60;\r\n\r\n\r\n    return(\r\n        <div>\r\n        <CircularProgressbar \r\n        value={percentage} \r\n        text={minutes} \r\n        styles={buildStyles({ \r\n            textColor: '#fff',\r\n            pathColor: red,\r\n            trailColor: 'rgba(255, 255, 255, .2)',\r\n        })} />\r\n        <div style={{marginTop: '20px'}}>\r\n            {isPaused ? <PlayButton /> : <PauseButton />}\r\n        </div>\r\n        <div style={{marginTop: '20px'}}>\r\n            <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}
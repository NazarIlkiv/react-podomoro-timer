[{"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\index.js":"1","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\reportWebVitals.js":"2","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\App.js":"3","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\Timer.js":"4","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\Button.js":"5","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\PauseButton.js":"6","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\SettingsButton.js":"7","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\Settings.js":"8","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\SettingsContext.js":"9","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\BackButton.js":"10"},{"size":535,"mtime":1658310733840,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1658310734552,"results":"13","hashOfConfig":"12"},{"size":679,"mtime":1658432865107,"results":"14","hashOfConfig":"12"},{"size":2894,"mtime":1658433119034,"results":"15","hashOfConfig":"12"},{"size":379,"mtime":1658316038111,"results":"16","hashOfConfig":"12"},{"size":405,"mtime":1658316825738,"results":"17","hashOfConfig":"12"},{"size":844,"mtime":1658393155898,"results":"18","hashOfConfig":"12"},{"size":1065,"mtime":1658434324575,"results":"19","hashOfConfig":"12"},{"size":112,"mtime":1658392337377,"results":"20","hashOfConfig":"12"},{"size":477,"mtime":1658393287550,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"yhmmnl",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\index.js",[],[],[],"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\reportWebVitals.js",[],[],"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\App.js",[],[],"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\Timer.js",["54"],[],"import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport PlayButton from './Button';\r\nimport PauseButton from './PauseButton';\r\nimport SettingsButton from './SettingsButton';\r\nimport {useContext, useState, useEffect, useRef} from 'react';\r\nimport SettingsContext from './SettingsContext';\r\n\r\n\r\n\r\nconst red = '#f54e4e';\r\nconst green = '#4aec8c';\r\n\r\nfunction Timer() {\r\n    const settingsInfo = useContext(SettingsContext);\r\n\r\n    const [isPaused, setIsPaused] = useState(true);\r\n    const [mode, setMode] = useState('work'); //work/null/break\r\n    const [secondsLeft, setSecondsLeft] = useState(0);\r\n\r\n    const secondsLeftRef = useRef(secondsLeft);\r\n    const isPausedRef = useRef(isPaused);\r\n    const modeRef = useRef(mode);\r\n\r\n    function switchMode() {\r\n        const nextMode = modeRef.current === 'work' ? 'break' : 'work';\r\n        const nextSeconds = (nextMode === 'work' ? settingsInfo.workMinutes : settingsInfo.breakMinutes) * 60 ; \r\n\r\n\r\n        setMode(nextMode);\r\nmodeRef.current = nextMode;\r\n\r\n\r\n\r\n        setSecondsLeft(nextSeconds);\r\n        secondsLeftRef.current = nextSeconds;\r\n    }\r\n\r\n    function tick() {\r\n        secondsLeftRef.current--;\r\n        setSecondsLeft(secondsLeftRef.current);\r\n    }\r\n\r\n    function initTimer() {\r\n        setSecondsLeft(settingsInfo.workMinutes * 60);\r\n        setSecondsLeft(secondsLeftRef.current);\r\n    }\r\n\r\n    useEffect(() => {\r\n        initTimer();\r\n\r\n       const interval = setInterval(() => {\r\n            if (isPausedRef.current) {\r\nreturn;\r\n            }\r\n            if (secondsLeftRef.current === 0) {\r\nreturn switchMode();\r\n            }\r\n\r\n            tick();\r\n        }, 1000);\r\nreturn () =>  clearInterval(interval);\r\n    }, [settingsInfo]);\r\n\r\n\r\nconst totalSeconds = mode === 'work' \r\n? settingsInfo.workMinutes * 60 \r\n: settingsInfo.breakMinutes * 60;\r\nconst percentage = Math.round(secondsLeft / totalSeconds  * 100);\r\n\r\nconst minutes = Math.floor(secondsLeft / 60);\r\nlet seconds = secondsLeft % 60;\r\nif(seconds < 10) seconds = '0'+seconds;\r\n\r\n\r\n    return(\r\n        <div>\r\n        <CircularProgressbar \r\n        value={percentage} \r\n        text={minutes + ':' + seconds} \r\n        styles={buildStyles({ \r\n            textColor: '#fff',\r\n            pathColor: mode === 'work' ? red : green,\r\n            trailColor: 'rgba(255, 255, 255, .2)',\r\n        })} />\r\n        <div style={{marginTop: '20px'}}>\r\n            {isPaused \r\n            ? <PlayButton onClick={() => { setIsPaused(false); isPausedRef.current = false; }} /> \r\n            : <PauseButton onClick={() => { setIsPaused(true); isPausedRef.current = true; }} />}\r\n        </div>\r\n        <div style={{marginTop: '20px'}}>\r\n            <SettingsButton onClick={() => settingsInfo.setShowSettings(true)} />\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\Button.js",[],[],"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\PauseButton.js",[],[],"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\SettingsButton.js",[],[],"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\Settings.js",[],[],"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\SettingsContext.js",[],[],"C:\\Users\\Nazar\\Desktop\\pomodoro-timer\\src\\BackButton.js",[],[],{"ruleId":"55","severity":1,"message":"56","line":63,"column":8,"nodeType":"57","endLine":63,"endColumn":22,"suggestions":"58"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'initTimer' and 'switchMode'. Either include them or remove the dependency array.","ArrayExpression",["59"],{"desc":"60","fix":"61"},"Update the dependencies array to be: [initTimer, settingsInfo, switchMode]",{"range":"62","text":"63"},[1780,1794],"[initTimer, settingsInfo, switchMode]"]